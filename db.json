{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/PR流程.md","hash":"d4e08575c470d68829873394da4655753829a1c0","modified":1669572010052},{"_id":"source/_posts/单元测试.md","hash":"16eb193e5c94cda7491da7f8b4436dab78160f53","modified":1664897093843},{"_id":"source/categories/index.md","hash":"18fb468211a6a2385d573fa7dc23bea8623bff55","modified":1658937776170},{"_id":"source/about/index.md","hash":"757b6122f01379f847fba11948635410d8d5197b","modified":1658994688284},{"_id":"source/_data/link.yml","hash":"45d1277470cbe45770f3de7b678d743f08a32548","modified":1658937931965},{"_id":"source/_posts/事务之MySQL与Spring.md","hash":"054d68c287942fec86b72220564492f33eee7880","modified":1659074351860},{"_id":"source/link/index.md","hash":"c203b9d8a2c359ee1222e4f8d0a89483d5fd81e1","modified":1658937813950},{"_id":"source/tags/index.md","hash":"dfd0b64fcc45903fc81c8461630c43564a80b519","modified":1658937694016},{"_id":"source/img/favicon.png","hash":"fa19d8b4b573f99d05f39e612982b1c570a82a2b","modified":1658932606541},{"_id":"source/img/avatar.jpg","hash":"16efbfeb42a77f6cb9edd5910eec4989faa51527","modified":1658932483897},{"_id":"themes/butterfly/plugins.yml","hash":"a9f927f7005aa22811017242fff42b1510865549","modified":1658925191625},{"_id":"themes/butterfly/package.json","hash":"b128a4d4ad3bb4f78a569a0ddd2010430a10d690","modified":1658925191624},{"_id":"themes/butterfly/README.md","hash":"f0e25045d220f3457fc00577928a1a17b9cae2d3","modified":1658925191529},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1658925191532},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1658925191533},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1658925191535},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1658925191536},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1658925191534},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1658925191537},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1658925191622},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1658925191622},{"_id":"themes/butterfly/.github/stale.yml","hash":"79b830939587a5c029b20db6615ba73907d60bb4","modified":1658925191527},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1658925191623},{"_id":"themes/butterfly/README_CN.md","hash":"7824e73a3f5c626ff00d23dfeb4d256a784c330f","modified":1658925191530},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1658925191526},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1658925191624},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1658925191527},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1658925191528},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1658925191538},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ddea99847fd41323f183cd0c9dae3174c586f5b3","modified":1658925191539},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d0f1b84be352862046e780800d696e80ef1cdd1","modified":1658925191540},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1658925191539},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1658925191574},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"3d95525a6d809be2f2a1cd6b33d3b7ecc0457d62","modified":1658925191568},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1658925191576},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1658925191576},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1658925191626},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1658925191627},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1658925191629},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1658925191629},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1658925191628},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1658925191627},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1658925191631},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1658925191637},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1658925191630},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1658925191638},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1658925191638},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1658925191639},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1658925191639},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1658925191640},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1658925191641},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1658925191641},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1658925191643},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1658925191642},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1658925191632},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1658925191634},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1658925191632},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1658925191633},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1658925191635},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1658925191636},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1658925191529},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1658925191679},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1658925191525},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1658925191682},{"_id":"themes/butterfly/source/css/var.styl","hash":"584ef7b18d5e677eb2e62f9b139097d3b714a993","modified":1658925191680},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1658925191681},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1658925191541},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1658925191689},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1658925191542},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8a3f9e674b44e6a92d4df22baca65d9d30007dc3","modified":1658925191559},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1658925191560},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1658925191560},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1658925191561},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1658925191562},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1658925191562},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1658925191563},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"6f489b24f06578440f18b629db56c810f00f8c3f","modified":1658925191564},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1658925191564},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1658925191565},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"37e407cb98398f64bf2ca3cb5300f671d6a42dad","modified":1658925191566},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1658925191567},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1658925191571},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"7a7061f3d5da043ea81f625893e1c5cace2c931f","modified":1658925191571},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1658925191569},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1658925191570},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1658925191572},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1658925191573},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e2eba0fcb8332cb333b2aff9c76664e40e2e1974","modified":1658925191573},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1658925191574},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1658925191576},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1658925191578},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1658925191575},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1658925191595},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1658925191605},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1658925191606},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"4e026840c915327e45331e63e4b7ef287e871204","modified":1658925191606},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"7b5fea9e1c113cab4c75f9d31d8efebe70d82e7a","modified":1658925191612},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1658925191613},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1658925191613},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1658925191684},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1658925191614},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1658925191615},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1658925191616},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1658925191614},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1658925191617},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1658925191618},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1658925191619},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1658925191619},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1658925191620},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1658925191621},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1658925191621},{"_id":"themes/butterfly/source/js/main.js","hash":"0b673b89d24b78b8544cc0e048953e6dcba3e9bf","modified":1658925191687},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1658925191690},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"af6e3357b8f6df18d0775b8352551c0f8ce38e55","modified":1658925191652},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1658925191653},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1658925191644},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1658925191654},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1658925191654},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1658925191656},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1658925191655},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f3aac52defb3497079a313e8c63ac2f7ee24dfbe","modified":1658925191655},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"9f880a6fa91784a4d3e9ffb0d4607e8a74d4d929","modified":1658925191657},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1658925191658},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1658925191646},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1658925191658},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1658925191659},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1658925191660},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e02b52bdd337c0ed3c9d3a507d1011403c38881d","modified":1658925191660},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1658925191645},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1658925191663},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1658925191651},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1658925191664},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1658925191665},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1658925191664},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1658925191662},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1658925191665},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1658925191666},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6d2a841c7656fb28b1e15afe1d7dda56c424b7d7","modified":1658925191667},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1658925191668},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1658925191672},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1658925191673},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1658925191673},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1658925191674},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1658925191674},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1658925191675},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1658925191676},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1658925191677},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1658925191676},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1658925191669},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1658925191670},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1658925191579},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1658925191671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1658925191578},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"6a79d114472699e4de1a56a46b9a4f35e8fcd0e4","modified":1658925191579},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1658925191581},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1658925191580},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1658925191581},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1658925191582},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1658925191585},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1658925191584},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1658925191585},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1658925191586},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1658925191587},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1658925191587},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1658925191588},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1658925191589},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1658925191590},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a222477bddba3c646ee9b8560442c2cb204adb11","modified":1658925191589},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1658925191590},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a348b6b2fb65fe11d256acfac0741074e77fe519","modified":1658925191591},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1658925191592},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"0d845515e457fac530c173905302eb30e045580c","modified":1658925191592},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1658925191593},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1658925191593},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1658925191594},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1658925191594},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1658925191595},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1658925191596},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"056756e43908519039b8bbd7a90f8c49d561eb52","modified":1658925191597},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1658925191596},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1658925191598},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1658925191599},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"6b60941942831cc91e395131ad9797b691632fcb","modified":1658925191601},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1658925191600},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1658925191602},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1658925191603},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1658925191605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1658925191604},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1658925191607},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1658925191608},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1658925191608},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1658925191688},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1658925191679},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1658925191609},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1658925191610},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1658925191610},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1658925191648},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1658925191689},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1658925191611},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1658925191650},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1658925191649},{"_id":"themes/butterfly/_config.yml","hash":"2729d475843406104b32d0e16cd011276bdef4a6","modified":1658925191531},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1658925191647},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1658925191650},{"_id":"public/categories/index.html","hash":"baf2c4b950fe491bf6384b3a2a925aa95c12f6c2","modified":1669574350109},{"_id":"public/about/index.html","hash":"8cda00c6e9c11b6c63777f98d9ebd74c5a458f08","modified":1669574350109},{"_id":"public/tags/index.html","hash":"00cc284fbdf09656af5909302f734a7f25115dce","modified":1669574350109},{"_id":"public/link/index.html","hash":"c35ade6b002f6055a22621f6a00d62c79a38dd95","modified":1669574350109},{"_id":"public/archives/index.html","hash":"d09a6a75456b89b9af87d71ac5e548d6f3b69cae","modified":1669574350109},{"_id":"public/archives/2022/index.html","hash":"c7cf16fd000fb181030e08a064f2a8e8c39b12b0","modified":1669574350109},{"_id":"public/archives/2022/07/index.html","hash":"43963c565c899a54b04d7c0c6c64d2660ea2a963","modified":1669574350109},{"_id":"public/archives/2022/10/index.html","hash":"028faac0b4237f4427f934661538a2b83189c8bf","modified":1669574350109},{"_id":"public/categories/java/index.html","hash":"fe9ee49877ed352e1675b18024a6d61d7551337c","modified":1669574350109},{"_id":"public/2022/10/04/单元测试/index.html","hash":"e5311e3dd820d1183e7ecc01599b52c9731a1ac2","modified":1669573559025},{"_id":"public/2022/07/28/事务之MySQL与Spring/index.html","hash":"2669538c4802a24183de62c2a0151b8234d79861","modified":1669573559025},{"_id":"public/index.html","hash":"63b51f92bc015e14bdbf493f0dde550181794af6","modified":1669574350109},{"_id":"public/tags/事务/index.html","hash":"ce2e610f7d7079bbd19adcd1febdbf0abd19b2d7","modified":1669574350109},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1664897603706},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1664897603706},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1664897603706},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1664897603706},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1664897603706},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1664897603706},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1664897603706},{"_id":"public/css/index.css","hash":"04372c0f5c582039952846340554e95dc5c6612e","modified":1664897603706},{"_id":"public/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1664897603706},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1664897603706},{"_id":"public/img/avatar.jpg","hash":"16efbfeb42a77f6cb9edd5910eec4989faa51527","modified":1664897603706},{"_id":"public/2022/10/04/PR流程/index.html","hash":"6373d71288af62f1dda59088392b937abd302877","modified":1669573559025},{"_id":"public/tags/git/index.html","hash":"d4c174553ef18338936907feef54c1cfd631aeb7","modified":1669574350109},{"_id":"source/_posts/测试方法.md","hash":"9eda94369637da2a3d3e4ec10a7b63375c47680c","modified":1669574342615},{"_id":"source/_posts/杂记20221125.md","hash":"63492dd34fedf179afd9fcff6a3ba9a72e9c82be","modified":1669573549443},{"_id":"source/_posts/测试方法/image-20221023000706159.png","hash":"0f1df717ca0b5d4b875575e18f7b0bc29ed53a9e","modified":1666454826000},{"_id":"source/_posts/测试方法/image-20221125023837803.png","hash":"2fda3538b0d2bea1c2a482d8e0571333356f3f0f","modified":1669315117000},{"_id":"source/_posts/测试方法/image-20221128021625046.png","hash":"3b048d9ba074235758ae7bbca9e2136a633ef5fd","modified":1669572985111},{"_id":"source/_posts/杂记20221125/image-20221128022212415.png","hash":"fc7ecb88d00534e3f394907494559992f4ea66cf","modified":1669573332525},{"_id":"source/_posts/测试方法/image-20221025122052446.png","hash":"5ff33aa403a2235ded570346d284e1494dde0bf3","modified":1666671652000},{"_id":"public/archives/2022/11/index.html","hash":"962e54a2d7dc1464e1e13995ebc59ab02a674ef6","modified":1669574350109},{"_id":"public/2022/11/28/杂记20221125/index.html","hash":"38a7ba63712612b5d5aa2a8cde6d889fdeafbe03","modified":1669573559025},{"_id":"public/2022/11/28/测试方法/index.html","hash":"f8861606de3177a1b26e3839c2f738e2429adb2a","modified":1669574350109},{"_id":"public/2022/11/28/测试方法/image-20221125023837803.png","hash":"2fda3538b0d2bea1c2a482d8e0571333356f3f0f","modified":1669573366539},{"_id":"public/2022/11/28/测试方法/image-20221023000706159.png","hash":"0f1df717ca0b5d4b875575e18f7b0bc29ed53a9e","modified":1669573366539},{"_id":"public/2022/11/28/测试方法/image-20221128021625046.png","hash":"3b048d9ba074235758ae7bbca9e2136a633ef5fd","modified":1669573366539},{"_id":"public/2022/11/28/测试方法/image-20221025122052446.png","hash":"5ff33aa403a2235ded570346d284e1494dde0bf3","modified":1669573366539},{"_id":"public/2022/11/28/杂记20221125/image-20221128022212415.png","hash":"fc7ecb88d00534e3f394907494559992f4ea66cf","modified":1669573366539},{"_id":"public/tags/杂记/index.html","hash":"5be696230f55473ac9a9168495af7953ac986727","modified":1669574350109}],"Category":[{"name":"java","_id":"cl8ud1pw60004vgvn44h7ekda"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}],"Page":[{"title":"categories","date":"2022-07-27T16:02:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-07-28 00:02:00\ntype: \"categories\"\n---\n","updated":"2022-07-27T16:02:56.170Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl8ud1pvt0000vgvngdy2dcfe","content":"","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"cover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":""},{"title":"about","date":"2022-07-28T07:48:00.000Z","type":"about","_content":"\n\n\n\n\n​\t欢迎你的访问！\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-07-28 15:48\ntype: \"about\"\n---\n\n\n\n\n\n​\t欢迎你的访问！\n","updated":"2022-07-28T07:51:28.284Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl8ud1pw40002vgvn6htv6ks3","content":"<p>​    欢迎你的访问！</p>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"cover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<p>​    欢迎你的访问！</p>\n"},{"title":"tags","date":"2022-07-27T16:00:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-07-28 00:00:58\ntype: \"tags\"\n---\n","updated":"2022-07-27T16:01:34.016Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl8ud1pw80006vgvn2wg7au1q","content":"","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"cover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":""},{"title":"link","date":"2022-07-27T16:03:16.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-07-28 00:03:16\ntype: \"link\"\n---\n","updated":"2022-07-27T16:03:33.950Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl8ud1pw90007vgvnfj9lf9uh","content":"","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"cover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":""}],"Post":[{"title":"事务之MySQL与Spring","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-07-27T17:09:09.000Z","password":null,"summary":null,"_content":"\n### 前请提要\n\n事务的ACID特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）\n事务隔离级别（读未提交，读已提交，可重复读，序列化）\nCAP理论：一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance）\n\n## MySQL事务实现原理\n\n### Redo Log\n\n负责原子性与持久性，记载对磁盘上数据进行的修改操作\n作用：恢复提交后的物理数据页\n构成：\n日志缓冲（内存） -- 易失\n重做日志文件（磁盘）--  持久化 不易失\n刷盘规则：\n\t（1）开启事务，发出提交事务指令后是否刷新日志由innodb_flush_log_at_trx_commit决定，默认1（每次提交事务都将日志缓冲中日志写入OS buffer，并且调用fsync(）写入磁盘文件，不会丢失数据）\n0、1、2的值影响写入OS buffer与写入磁盘文件是否需要隔1s\n（2）按频率刷新。刷新频率由innodb_flush_log_at_timeout决定，默认1s\n（3）Log Buffer使用内存>50% 触发刷盘操作\n（4）chechpoint 一定程度上代表了刷鞋到磁盘时日志所处LSN位置（Long sequence number）\n\n\n### Undo log\n\n作用：回滚事务和多版本并发事务--MVCC机制\nundo log也会产生redo log保证完整性与可靠性\n存储：段segment，存放在共享数据表空间，默认ibdata1文件\nundo log实现MVCC：\n两个隐藏列：行的创建版本；行删除版本\n可重复读下增删查改：\nselect:只查找版本号<=当前事务版本号的数据\ninsert：将当前事务版本号保存为当前行创建版本号\ndelete: 当前事务版本号保存为删除的数据行版本号，作为行删除标识\nupdate:innodb将待修改的行赋值为新行，当前事务版本号保存为新数据行的创建版本号，**同时保存当前事务版本号为原来数据行删除版本号**\n实际innodb实现上 每行数据后面添加了三个字段：6字节事务id,7字节回滚指针,6字节DB_ROW_ID\n\n\n### Binlog\n\n属于MySQL的日志(redo log是innodb特有)  二进制日志\n以事件形式记录所有数据库表结构变更以及表数据变更的二进制日志\n使用场景：主从复制；数据恢复\n记录模式:row\\statement\\mixed\n\n\n### MySQL事务执行流程\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400261761-acb3d305-97db-41c9-ba16-aa57cb63964f.jpeg)\n\n### 事务恢复流程\n\n<img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400240625-491c357b-c3f6-4866-9734-c977a5cc9082.jpeg\" style=\"zoom:67%;\" />\n\n### MySQL中XA事务\n\nXA(eXtended Architecture)是指由X/Open 组织提出的分布式交易处理的规范。XA 是一个分布式事务协议,由Tuxedo 提出,所以分布式事务也称为XA 事务。\n本质上基于两阶段提交，有一个事务管理器，一个或多个资源管理器和一个应用程序组成\nMySQL中通过show engiens命令查看存储引擎是否支持XA事务\n可以通过JDBC操作MySQL事务但较为繁琐\n\n\n## Spring 事务实现原理\n\n本质上是对数据库事务的进一步封装\n使用spring事务则不用JDBC手动开启、提交、回滚事务\n通过注解实现\n\n### 三大接口\n\nPlatform TransactionManager：为Hibernate、MyBatis、JTA等持久化框架提供了事务管理器\nTransactionDefinition：主要定义了与事务相关的方法，表示事务属性的常量值等。部分事务属性的常量与Propagation枚举类中的事务传播类型相对应\nTransactionStatus：存储事务执行状态，并定义一组方法来判断或读取事务状态信息\n\n### 隔离级别\n\nISOLATION_DEFAULT：默认。直接使用数据库默认的事务隔离级别\nISOLATION_READ_UNCOMMITTED：最低，会产生脏读、不可重复读和幻读问题。相当于MySQL的UNCOMMITTED_READ\nISOLATION_READ_COMMITTED：存在不可重复读和幻读问题。相当于COMMITTED_READ\nISOLATION_REPEATABLE_READ：存在幻读问题。相当于REPEATABLE_READ\nISOLATION_SERIALIZABLE：事务只能按特定顺序执行，相当于SERIALIZABLE\n\nps：不可重复读关注修改，幻读关注增删\n\n### 传播机制\n\n加粗为常用事务类型\n支持当前事务：\n**REQUIRED：默认**\nSUPPORTS：外部不存在事务时，不会开启新的事物，外部存在事务时，将其加入外部事物\nMANDATORY：具备强制性，当前操作必须存在事务，不存在则抛出异常\n\n不支持当前事务：\n**REQUIRES_NEW：总是创建新的事务执行，适用于不受外层方法事务影响的场景如记录事务日志等操作**\n**NOT_SUPPORTED：适用于发送提示信息、邮件等不影响系统的主体业务逻辑，即使操作失败也不应该对主体逻辑产生影响，不能使主题逻辑的事务回滚**\nNEVER：当前操作存在事务则抛出异常\t\n嵌套：\nNESTED：封装事务存在，并且外部事物抛出异常回滚，内层事务必回滚。内层事务回滚则并不影响外层事务的提交与回滚。如果封装事务不存在则按REQUIED事务传播类型执行\n\n### 失效场景\n\n数据库不支持事务\n事务方法未被Spring管理\n方法没有被public修饰\n同一类中方法调用\n未配置事务管理器\n方法的事务传播类型不支持事务\n不正确的捕获异常\n标注错误异常类型\n\n\n\n### 参考资料\n\n《深入理解分布式事务-原理与实战》  肖宇、冰河著\n\n","source":"_posts/事务之MySQL与Spring.md","raw":"---\ntitle: 事务之MySQL与Spring\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-07-28 01:09:09\npassword:\nsummary:\ntags: 事务\ncategories: java\n---\n\n### 前请提要\n\n事务的ACID特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）\n事务隔离级别（读未提交，读已提交，可重复读，序列化）\nCAP理论：一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance）\n\n## MySQL事务实现原理\n\n### Redo Log\n\n负责原子性与持久性，记载对磁盘上数据进行的修改操作\n作用：恢复提交后的物理数据页\n构成：\n日志缓冲（内存） -- 易失\n重做日志文件（磁盘）--  持久化 不易失\n刷盘规则：\n\t（1）开启事务，发出提交事务指令后是否刷新日志由innodb_flush_log_at_trx_commit决定，默认1（每次提交事务都将日志缓冲中日志写入OS buffer，并且调用fsync(）写入磁盘文件，不会丢失数据）\n0、1、2的值影响写入OS buffer与写入磁盘文件是否需要隔1s\n（2）按频率刷新。刷新频率由innodb_flush_log_at_timeout决定，默认1s\n（3）Log Buffer使用内存>50% 触发刷盘操作\n（4）chechpoint 一定程度上代表了刷鞋到磁盘时日志所处LSN位置（Long sequence number）\n\n\n### Undo log\n\n作用：回滚事务和多版本并发事务--MVCC机制\nundo log也会产生redo log保证完整性与可靠性\n存储：段segment，存放在共享数据表空间，默认ibdata1文件\nundo log实现MVCC：\n两个隐藏列：行的创建版本；行删除版本\n可重复读下增删查改：\nselect:只查找版本号<=当前事务版本号的数据\ninsert：将当前事务版本号保存为当前行创建版本号\ndelete: 当前事务版本号保存为删除的数据行版本号，作为行删除标识\nupdate:innodb将待修改的行赋值为新行，当前事务版本号保存为新数据行的创建版本号，**同时保存当前事务版本号为原来数据行删除版本号**\n实际innodb实现上 每行数据后面添加了三个字段：6字节事务id,7字节回滚指针,6字节DB_ROW_ID\n\n\n### Binlog\n\n属于MySQL的日志(redo log是innodb特有)  二进制日志\n以事件形式记录所有数据库表结构变更以及表数据变更的二进制日志\n使用场景：主从复制；数据恢复\n记录模式:row\\statement\\mixed\n\n\n### MySQL事务执行流程\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400261761-acb3d305-97db-41c9-ba16-aa57cb63964f.jpeg)\n\n### 事务恢复流程\n\n<img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400240625-491c357b-c3f6-4866-9734-c977a5cc9082.jpeg\" style=\"zoom:67%;\" />\n\n### MySQL中XA事务\n\nXA(eXtended Architecture)是指由X/Open 组织提出的分布式交易处理的规范。XA 是一个分布式事务协议,由Tuxedo 提出,所以分布式事务也称为XA 事务。\n本质上基于两阶段提交，有一个事务管理器，一个或多个资源管理器和一个应用程序组成\nMySQL中通过show engiens命令查看存储引擎是否支持XA事务\n可以通过JDBC操作MySQL事务但较为繁琐\n\n\n## Spring 事务实现原理\n\n本质上是对数据库事务的进一步封装\n使用spring事务则不用JDBC手动开启、提交、回滚事务\n通过注解实现\n\n### 三大接口\n\nPlatform TransactionManager：为Hibernate、MyBatis、JTA等持久化框架提供了事务管理器\nTransactionDefinition：主要定义了与事务相关的方法，表示事务属性的常量值等。部分事务属性的常量与Propagation枚举类中的事务传播类型相对应\nTransactionStatus：存储事务执行状态，并定义一组方法来判断或读取事务状态信息\n\n### 隔离级别\n\nISOLATION_DEFAULT：默认。直接使用数据库默认的事务隔离级别\nISOLATION_READ_UNCOMMITTED：最低，会产生脏读、不可重复读和幻读问题。相当于MySQL的UNCOMMITTED_READ\nISOLATION_READ_COMMITTED：存在不可重复读和幻读问题。相当于COMMITTED_READ\nISOLATION_REPEATABLE_READ：存在幻读问题。相当于REPEATABLE_READ\nISOLATION_SERIALIZABLE：事务只能按特定顺序执行，相当于SERIALIZABLE\n\nps：不可重复读关注修改，幻读关注增删\n\n### 传播机制\n\n加粗为常用事务类型\n支持当前事务：\n**REQUIRED：默认**\nSUPPORTS：外部不存在事务时，不会开启新的事物，外部存在事务时，将其加入外部事物\nMANDATORY：具备强制性，当前操作必须存在事务，不存在则抛出异常\n\n不支持当前事务：\n**REQUIRES_NEW：总是创建新的事务执行，适用于不受外层方法事务影响的场景如记录事务日志等操作**\n**NOT_SUPPORTED：适用于发送提示信息、邮件等不影响系统的主体业务逻辑，即使操作失败也不应该对主体逻辑产生影响，不能使主题逻辑的事务回滚**\nNEVER：当前操作存在事务则抛出异常\t\n嵌套：\nNESTED：封装事务存在，并且外部事物抛出异常回滚，内层事务必回滚。内层事务回滚则并不影响外层事务的提交与回滚。如果封装事务不存在则按REQUIED事务传播类型执行\n\n### 失效场景\n\n数据库不支持事务\n事务方法未被Spring管理\n方法没有被public修饰\n同一类中方法调用\n未配置事务管理器\n方法的事务传播类型不支持事务\n不正确的捕获异常\n标注错误异常类型\n\n\n\n### 参考资料\n\n《深入理解分布式事务-原理与实战》  肖宇、冰河著\n\n","slug":"事务之MySQL与Spring","published":1,"updated":"2022-07-29T05:59:11.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ud1pvx0001vgvngv5m1u6o","content":"<h3 id=\"前请提要\"><a href=\"#前请提要\" class=\"headerlink\" title=\"前请提要\"></a>前请提要</h3><p>事务的ACID特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）<br>事务隔离级别（读未提交，读已提交，可重复读，序列化）<br>CAP理论：一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance）</p>\n<h2 id=\"MySQL事务实现原理\"><a href=\"#MySQL事务实现原理\" class=\"headerlink\" title=\"MySQL事务实现原理\"></a>MySQL事务实现原理</h2><h3 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h3><p>负责原子性与持久性，记载对磁盘上数据进行的修改操作<br>作用：恢复提交后的物理数据页<br>构成：<br>日志缓冲（内存） – 易失<br>重做日志文件（磁盘）–  持久化 不易失<br>刷盘规则：<br>    （1）开启事务，发出提交事务指令后是否刷新日志由innodb_flush_log_at_trx_commit决定，默认1（每次提交事务都将日志缓冲中日志写入OS buffer，并且调用fsync(）写入磁盘文件，不会丢失数据）<br>0、1、2的值影响写入OS buffer与写入磁盘文件是否需要隔1s<br>（2）按频率刷新。刷新频率由innodb_flush_log_at_timeout决定，默认1s<br>（3）Log Buffer使用内存&gt;50% 触发刷盘操作<br>（4）chechpoint 一定程度上代表了刷鞋到磁盘时日志所处LSN位置（Long sequence number）</p>\n<h3 id=\"Undo-log\"><a href=\"#Undo-log\" class=\"headerlink\" title=\"Undo log\"></a>Undo log</h3><p>作用：回滚事务和多版本并发事务–MVCC机制<br>undo log也会产生redo log保证完整性与可靠性<br>存储：段segment，存放在共享数据表空间，默认ibdata1文件<br>undo log实现MVCC：<br>两个隐藏列：行的创建版本；行删除版本<br>可重复读下增删查改：<br>select:只查找版本号&lt;=当前事务版本号的数据<br>insert：将当前事务版本号保存为当前行创建版本号<br>delete: 当前事务版本号保存为删除的数据行版本号，作为行删除标识<br>update:innodb将待修改的行赋值为新行，当前事务版本号保存为新数据行的创建版本号，<strong>同时保存当前事务版本号为原来数据行删除版本号</strong><br>实际innodb实现上 每行数据后面添加了三个字段：6字节事务id,7字节回滚指针,6字节DB_ROW_ID</p>\n<h3 id=\"Binlog\"><a href=\"#Binlog\" class=\"headerlink\" title=\"Binlog\"></a>Binlog</h3><p>属于MySQL的日志(redo log是innodb特有)  二进制日志<br>以事件形式记录所有数据库表结构变更以及表数据变更的二进制日志<br>使用场景：主从复制；数据恢复<br>记录模式:row\\statement\\mixed</p>\n<h3 id=\"MySQL事务执行流程\"><a href=\"#MySQL事务执行流程\" class=\"headerlink\" title=\"MySQL事务执行流程\"></a>MySQL事务执行流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400261761-acb3d305-97db-41c9-ba16-aa57cb63964f.jpeg\"></p>\n<h3 id=\"事务恢复流程\"><a href=\"#事务恢复流程\" class=\"headerlink\" title=\"事务恢复流程\"></a>事务恢复流程</h3><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400240625-491c357b-c3f6-4866-9734-c977a5cc9082.jpeg\" style=\"zoom:67%;\">\n\n<h3 id=\"MySQL中XA事务\"><a href=\"#MySQL中XA事务\" class=\"headerlink\" title=\"MySQL中XA事务\"></a>MySQL中XA事务</h3><p>XA(eXtended Architecture)是指由X/Open 组织提出的分布式交易处理的规范。XA 是一个分布式事务协议,由Tuxedo 提出,所以分布式事务也称为XA 事务。<br>本质上基于两阶段提交，有一个事务管理器，一个或多个资源管理器和一个应用程序组成<br>MySQL中通过show engiens命令查看存储引擎是否支持XA事务<br>可以通过JDBC操作MySQL事务但较为繁琐</p>\n<h2 id=\"Spring-事务实现原理\"><a href=\"#Spring-事务实现原理\" class=\"headerlink\" title=\"Spring 事务实现原理\"></a>Spring 事务实现原理</h2><p>本质上是对数据库事务的进一步封装<br>使用spring事务则不用JDBC手动开启、提交、回滚事务<br>通过注解实现</p>\n<h3 id=\"三大接口\"><a href=\"#三大接口\" class=\"headerlink\" title=\"三大接口\"></a>三大接口</h3><p>Platform TransactionManager：为Hibernate、MyBatis、JTA等持久化框架提供了事务管理器<br>TransactionDefinition：主要定义了与事务相关的方法，表示事务属性的常量值等。部分事务属性的常量与Propagation枚举类中的事务传播类型相对应<br>TransactionStatus：存储事务执行状态，并定义一组方法来判断或读取事务状态信息</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>ISOLATION_DEFAULT：默认。直接使用数据库默认的事务隔离级别<br>ISOLATION_READ_UNCOMMITTED：最低，会产生脏读、不可重复读和幻读问题。相当于MySQL的UNCOMMITTED_READ<br>ISOLATION_READ_COMMITTED：存在不可重复读和幻读问题。相当于COMMITTED_READ<br>ISOLATION_REPEATABLE_READ：存在幻读问题。相当于REPEATABLE_READ<br>ISOLATION_SERIALIZABLE：事务只能按特定顺序执行，相当于SERIALIZABLE</p>\n<p>ps：不可重复读关注修改，幻读关注增删</p>\n<h3 id=\"传播机制\"><a href=\"#传播机制\" class=\"headerlink\" title=\"传播机制\"></a>传播机制</h3><p>加粗为常用事务类型<br>支持当前事务：<br><strong>REQUIRED：默认</strong><br>SUPPORTS：外部不存在事务时，不会开启新的事物，外部存在事务时，将其加入外部事物<br>MANDATORY：具备强制性，当前操作必须存在事务，不存在则抛出异常</p>\n<p>不支持当前事务：<br><strong>REQUIRES_NEW：总是创建新的事务执行，适用于不受外层方法事务影响的场景如记录事务日志等操作</strong><br><strong>NOT_SUPPORTED：适用于发送提示信息、邮件等不影响系统的主体业务逻辑，即使操作失败也不应该对主体逻辑产生影响，不能使主题逻辑的事务回滚</strong><br>NEVER：当前操作存在事务则抛出异常<br>嵌套：<br>NESTED：封装事务存在，并且外部事物抛出异常回滚，内层事务必回滚。内层事务回滚则并不影响外层事务的提交与回滚。如果封装事务不存在则按REQUIED事务传播类型执行</p>\n<h3 id=\"失效场景\"><a href=\"#失效场景\" class=\"headerlink\" title=\"失效场景\"></a>失效场景</h3><p>数据库不支持事务<br>事务方法未被Spring管理<br>方法没有被public修饰<br>同一类中方法调用<br>未配置事务管理器<br>方法的事务传播类型不支持事务<br>不正确的捕获异常<br>标注错误异常类型</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>《深入理解分布式事务-原理与实战》  肖宇、冰河著</p>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"randomcover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<h3 id=\"前请提要\"><a href=\"#前请提要\" class=\"headerlink\" title=\"前请提要\"></a>前请提要</h3><p>事务的ACID特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）<br>事务隔离级别（读未提交，读已提交，可重复读，序列化）<br>CAP理论：一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance）</p>\n<h2 id=\"MySQL事务实现原理\"><a href=\"#MySQL事务实现原理\" class=\"headerlink\" title=\"MySQL事务实现原理\"></a>MySQL事务实现原理</h2><h3 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h3><p>负责原子性与持久性，记载对磁盘上数据进行的修改操作<br>作用：恢复提交后的物理数据页<br>构成：<br>日志缓冲（内存） – 易失<br>重做日志文件（磁盘）–  持久化 不易失<br>刷盘规则：<br>    （1）开启事务，发出提交事务指令后是否刷新日志由innodb_flush_log_at_trx_commit决定，默认1（每次提交事务都将日志缓冲中日志写入OS buffer，并且调用fsync(）写入磁盘文件，不会丢失数据）<br>0、1、2的值影响写入OS buffer与写入磁盘文件是否需要隔1s<br>（2）按频率刷新。刷新频率由innodb_flush_log_at_timeout决定，默认1s<br>（3）Log Buffer使用内存&gt;50% 触发刷盘操作<br>（4）chechpoint 一定程度上代表了刷鞋到磁盘时日志所处LSN位置（Long sequence number）</p>\n<h3 id=\"Undo-log\"><a href=\"#Undo-log\" class=\"headerlink\" title=\"Undo log\"></a>Undo log</h3><p>作用：回滚事务和多版本并发事务–MVCC机制<br>undo log也会产生redo log保证完整性与可靠性<br>存储：段segment，存放在共享数据表空间，默认ibdata1文件<br>undo log实现MVCC：<br>两个隐藏列：行的创建版本；行删除版本<br>可重复读下增删查改：<br>select:只查找版本号&lt;=当前事务版本号的数据<br>insert：将当前事务版本号保存为当前行创建版本号<br>delete: 当前事务版本号保存为删除的数据行版本号，作为行删除标识<br>update:innodb将待修改的行赋值为新行，当前事务版本号保存为新数据行的创建版本号，<strong>同时保存当前事务版本号为原来数据行删除版本号</strong><br>实际innodb实现上 每行数据后面添加了三个字段：6字节事务id,7字节回滚指针,6字节DB_ROW_ID</p>\n<h3 id=\"Binlog\"><a href=\"#Binlog\" class=\"headerlink\" title=\"Binlog\"></a>Binlog</h3><p>属于MySQL的日志(redo log是innodb特有)  二进制日志<br>以事件形式记录所有数据库表结构变更以及表数据变更的二进制日志<br>使用场景：主从复制；数据恢复<br>记录模式:row\\statement\\mixed</p>\n<h3 id=\"MySQL事务执行流程\"><a href=\"#MySQL事务执行流程\" class=\"headerlink\" title=\"MySQL事务执行流程\"></a>MySQL事务执行流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400261761-acb3d305-97db-41c9-ba16-aa57cb63964f.jpeg\"></p>\n<h3 id=\"事务恢复流程\"><a href=\"#事务恢复流程\" class=\"headerlink\" title=\"事务恢复流程\"></a>事务恢复流程</h3><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1655400240625-491c357b-c3f6-4866-9734-c977a5cc9082.jpeg\" style=\"zoom:67%;\">\n\n<h3 id=\"MySQL中XA事务\"><a href=\"#MySQL中XA事务\" class=\"headerlink\" title=\"MySQL中XA事务\"></a>MySQL中XA事务</h3><p>XA(eXtended Architecture)是指由X/Open 组织提出的分布式交易处理的规范。XA 是一个分布式事务协议,由Tuxedo 提出,所以分布式事务也称为XA 事务。<br>本质上基于两阶段提交，有一个事务管理器，一个或多个资源管理器和一个应用程序组成<br>MySQL中通过show engiens命令查看存储引擎是否支持XA事务<br>可以通过JDBC操作MySQL事务但较为繁琐</p>\n<h2 id=\"Spring-事务实现原理\"><a href=\"#Spring-事务实现原理\" class=\"headerlink\" title=\"Spring 事务实现原理\"></a>Spring 事务实现原理</h2><p>本质上是对数据库事务的进一步封装<br>使用spring事务则不用JDBC手动开启、提交、回滚事务<br>通过注解实现</p>\n<h3 id=\"三大接口\"><a href=\"#三大接口\" class=\"headerlink\" title=\"三大接口\"></a>三大接口</h3><p>Platform TransactionManager：为Hibernate、MyBatis、JTA等持久化框架提供了事务管理器<br>TransactionDefinition：主要定义了与事务相关的方法，表示事务属性的常量值等。部分事务属性的常量与Propagation枚举类中的事务传播类型相对应<br>TransactionStatus：存储事务执行状态，并定义一组方法来判断或读取事务状态信息</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>ISOLATION_DEFAULT：默认。直接使用数据库默认的事务隔离级别<br>ISOLATION_READ_UNCOMMITTED：最低，会产生脏读、不可重复读和幻读问题。相当于MySQL的UNCOMMITTED_READ<br>ISOLATION_READ_COMMITTED：存在不可重复读和幻读问题。相当于COMMITTED_READ<br>ISOLATION_REPEATABLE_READ：存在幻读问题。相当于REPEATABLE_READ<br>ISOLATION_SERIALIZABLE：事务只能按特定顺序执行，相当于SERIALIZABLE</p>\n<p>ps：不可重复读关注修改，幻读关注增删</p>\n<h3 id=\"传播机制\"><a href=\"#传播机制\" class=\"headerlink\" title=\"传播机制\"></a>传播机制</h3><p>加粗为常用事务类型<br>支持当前事务：<br><strong>REQUIRED：默认</strong><br>SUPPORTS：外部不存在事务时，不会开启新的事物，外部存在事务时，将其加入外部事物<br>MANDATORY：具备强制性，当前操作必须存在事务，不存在则抛出异常</p>\n<p>不支持当前事务：<br><strong>REQUIRES_NEW：总是创建新的事务执行，适用于不受外层方法事务影响的场景如记录事务日志等操作</strong><br><strong>NOT_SUPPORTED：适用于发送提示信息、邮件等不影响系统的主体业务逻辑，即使操作失败也不应该对主体逻辑产生影响，不能使主题逻辑的事务回滚</strong><br>NEVER：当前操作存在事务则抛出异常<br>嵌套：<br>NESTED：封装事务存在，并且外部事物抛出异常回滚，内层事务必回滚。内层事务回滚则并不影响外层事务的提交与回滚。如果封装事务不存在则按REQUIED事务传播类型执行</p>\n<h3 id=\"失效场景\"><a href=\"#失效场景\" class=\"headerlink\" title=\"失效场景\"></a>失效场景</h3><p>数据库不支持事务<br>事务方法未被Spring管理<br>方法没有被public修饰<br>同一类中方法调用<br>未配置事务管理器<br>方法的事务传播类型不支持事务<br>不正确的捕获异常<br>标注错误异常类型</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>《深入理解分布式事务-原理与实战》  肖宇、冰河著</p>\n"},{"title":"单元测试","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-10-04T15:23:40.000Z","password":null,"summary":null,"_content":"\n### JUnit5\n\nJUnit是最早接触也是最被熟知的Java单元测试框架\n[https://junit.org/junit5/docs/current/user-guide/#overview](https://junit.org/junit5/docs/current/user-guide/#overview)\n\n### mockito4\n\n[https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html)\n\n使用过程中区分@Mock与@injectMocks\n@InjectMocks: 创建一个实例，简单的说是这个Mock可以调用真实代码的方法\n其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。\n请注意：必须使用@RunWith(MockitoJUnitRunner.class)或Mockito.initMocks(this)初始化这些模拟并注入它们。\n\n### MockMvc\n\n在对Controller进行测试时，希望能够通过输入URL对Controller进行测试，如果通过启动服务器，建立http client进行测试，这样会使得测试变得很麻烦，比如，启动速度慢，测试验证不方便，依赖网络环境等\n引入了MockMVC对Controller测试更为方便\nMockMvc基于springframework.test\n\n#### 步骤\n\n- `MockMvcBuilder`构造MockMvc的构造器；\n- mockMvc调用`perform`，执行一个`RequestBuilder`请求，调用controller的业务处理逻辑；\n- `perform`返回`ResultActions`，返回操作结果，通过ResultActions，提供了统一的验证方式；\n- 使用`StatusResultMatchers`对请求结果进行验证；\n- 使用`ContentResultMatchers`对请求返回的内容进行验证；\n","source":"_posts/单元测试.md","raw":"---\ntitle: 单元测试\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-10-04 23:23:40\npassword:\nsummary:\ntags:\ncategories:\n---\n\n### JUnit5\n\nJUnit是最早接触也是最被熟知的Java单元测试框架\n[https://junit.org/junit5/docs/current/user-guide/#overview](https://junit.org/junit5/docs/current/user-guide/#overview)\n\n### mockito4\n\n[https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html)\n\n使用过程中区分@Mock与@injectMocks\n@InjectMocks: 创建一个实例，简单的说是这个Mock可以调用真实代码的方法\n其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。\n请注意：必须使用@RunWith(MockitoJUnitRunner.class)或Mockito.initMocks(this)初始化这些模拟并注入它们。\n\n### MockMvc\n\n在对Controller进行测试时，希望能够通过输入URL对Controller进行测试，如果通过启动服务器，建立http client进行测试，这样会使得测试变得很麻烦，比如，启动速度慢，测试验证不方便，依赖网络环境等\n引入了MockMVC对Controller测试更为方便\nMockMvc基于springframework.test\n\n#### 步骤\n\n- `MockMvcBuilder`构造MockMvc的构造器；\n- mockMvc调用`perform`，执行一个`RequestBuilder`请求，调用controller的业务处理逻辑；\n- `perform`返回`ResultActions`，返回操作结果，通过ResultActions，提供了统一的验证方式；\n- 使用`StatusResultMatchers`对请求结果进行验证；\n- 使用`ContentResultMatchers`对请求返回的内容进行验证；\n","slug":"单元测试","published":1,"updated":"2022-10-04T15:24:53.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8ud1pw40003vgvnhsn88bd3","content":"<h3 id=\"JUnit5\"><a href=\"#JUnit5\" class=\"headerlink\" title=\"JUnit5\"></a>JUnit5</h3><p>JUnit是最早接触也是最被熟知的Java单元测试框架<br><a href=\"https://junit.org/junit5/docs/current/user-guide/#overview\">https://junit.org/junit5/docs/current/user-guide/#overview</a></p>\n<h3 id=\"mockito4\"><a href=\"#mockito4\" class=\"headerlink\" title=\"mockito4\"></a>mockito4</h3><p><a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html\">https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html</a></p>\n<p>使用过程中区分@Mock与@injectMocks<br>@InjectMocks: 创建一个实例，简单的说是这个Mock可以调用真实代码的方法<br>其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。<br>请注意：必须使用@RunWith(MockitoJUnitRunner.class)或Mockito.initMocks(this)初始化这些模拟并注入它们。</p>\n<h3 id=\"MockMvc\"><a href=\"#MockMvc\" class=\"headerlink\" title=\"MockMvc\"></a>MockMvc</h3><p>在对Controller进行测试时，希望能够通过输入URL对Controller进行测试，如果通过启动服务器，建立http client进行测试，这样会使得测试变得很麻烦，比如，启动速度慢，测试验证不方便，依赖网络环境等<br>引入了MockMVC对Controller测试更为方便<br>MockMvc基于springframework.test</p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><code>MockMvcBuilder</code>构造MockMvc的构造器；</li>\n<li>mockMvc调用<code>perform</code>，执行一个<code>RequestBuilder</code>请求，调用controller的业务处理逻辑；</li>\n<li><code>perform</code>返回<code>ResultActions</code>，返回操作结果，通过ResultActions，提供了统一的验证方式；</li>\n<li>使用<code>StatusResultMatchers</code>对请求结果进行验证；</li>\n<li>使用<code>ContentResultMatchers</code>对请求返回的内容进行验证；</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"randomcover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<h3 id=\"JUnit5\"><a href=\"#JUnit5\" class=\"headerlink\" title=\"JUnit5\"></a>JUnit5</h3><p>JUnit是最早接触也是最被熟知的Java单元测试框架<br><a href=\"https://junit.org/junit5/docs/current/user-guide/#overview\">https://junit.org/junit5/docs/current/user-guide/#overview</a></p>\n<h3 id=\"mockito4\"><a href=\"#mockito4\" class=\"headerlink\" title=\"mockito4\"></a>mockito4</h3><p><a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html\">https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html</a></p>\n<p>使用过程中区分@Mock与@injectMocks<br>@InjectMocks: 创建一个实例，简单的说是这个Mock可以调用真实代码的方法<br>其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。<br>请注意：必须使用@RunWith(MockitoJUnitRunner.class)或Mockito.initMocks(this)初始化这些模拟并注入它们。</p>\n<h3 id=\"MockMvc\"><a href=\"#MockMvc\" class=\"headerlink\" title=\"MockMvc\"></a>MockMvc</h3><p>在对Controller进行测试时，希望能够通过输入URL对Controller进行测试，如果通过启动服务器，建立http client进行测试，这样会使得测试变得很麻烦，比如，启动速度慢，测试验证不方便，依赖网络环境等<br>引入了MockMVC对Controller测试更为方便<br>MockMvc基于springframework.test</p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><code>MockMvcBuilder</code>构造MockMvc的构造器；</li>\n<li>mockMvc调用<code>perform</code>，执行一个<code>RequestBuilder</code>请求，调用controller的业务处理逻辑；</li>\n<li><code>perform</code>返回<code>ResultActions</code>，返回操作结果，通过ResultActions，提供了统一的验证方式；</li>\n<li>使用<code>StatusResultMatchers</code>对请求结果进行验证；</li>\n<li>使用<code>ContentResultMatchers</code>对请求返回的内容进行验证；</li>\n</ul>\n"},{"title":"PR流程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-10-03T17:55:14.000Z","password":null,"summary":null,"_content":"\nps: 本次操作以Seata为源仓库\n\n### 三阶段\n\n![img](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658886093327-e4f54f3e-47e6-494f-acfb-ed3bb0ea768e.jpeg)\n\n\n\n### 准备仓库\n\n#### fork项目\n\n进入源项目页面，点击右上角Fork按钮\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888621847-879f79fc-a17c-499b-b5ca-42006d34ddbf-16588931386535-165889350667013.png)\n\n会自动生成以自己名称命名的项目\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888505200-c951bc7d-18cd-48fe-89f6-c557a45ed51d-165889350975115.png)\n\n#### clone到本地\n\n即将自己名称下的项目下载到本地\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889063492-78b17270-fd3b-468f-aced-3199adb2872a.png)\n\n```powershell\ngit clone https://github.com/(your_github_name)/(upstream_project_name).git\ncd upstream_project_name\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889091140-634fb3a9-e8c5-4ba2-b05a-c635a40b9449-16588932048249-165889351770819.png)\n\n#### 设置remote\n\n与源远程仓库建立联系\n\n```powershell\ngit remote add upstream https://github.com/...(source_project_address)\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889446085-e867c55a-dcd5-4b78-af41-58631e011463.png)\n查看联系\n\n```powershell\ngit remote -v\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889385032-1ada811c-56dd-4d54-a3da-533cd3544e06.png)\n可以看到自己的仓库地址(`origin `)与源仓库地址(` upstream `)\n\n#### 编译项目（非必须）\n\n编译并安装所有模块到Maven本地仓库缓存，同时会生成ANTLR.g4语法文件对应的解析器Java类，这样在IDE就不会有相关编译错误。\n\n```powershell\ncd upstream_project_name\n#我一般只跳过checkstyle和Tests\nmvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=true -Djacoco.skip=true -DskipITs -DskipTests -Prelease\n```\n\n以后从源文件拉去最新代码并新建分支时可能会遇到类似解析器编译错误，可以重新运行该命令来解决问题。\n\n#### 创建分支\n\n用于开发\n\n```powershell\n#切换本地分支（切换分支到develop）\ngit checkout upstream develop\n\n# 将更新源远程repo(upstream)所包含develop分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中\ngit fetch upstream\n\n#改变基底，类似与git merge 但源仓库有最新提交时两者间有区别\ngit rebase upstream/master\n\n# 将代码push到自己名称下仓库(origin)的master分支\ngit push origin master\n\n#查看当前所在分支\ngit branch\n\n#创建新的本地分支，并切换到新分支(同原分支)\ngit checkout -b your_branch\n\n#新产生远程分支your_branch并将本地your_branch分支关联到远程your_branch分支\ngit push origin your_branch:your_branch\n```\n\nPR会按照squash方式进行merge。如果不创建新分支，本地和远程的提交记录将不能保持同步\nps: (1)方便id显示在contributor列表中可以做以下设置\n\n```powershell\ngit config --global your.name\"username\"\ngit congig --global your.email\"xxx@mail.com\"\n```\n\n(2)分支查看\n\n本地分支查看 git branch    \n\n远程分支查看 git branch -r\n\n全部分支 git branch -a\n\n分支细节查看 git branch -vv / git branch -vvr\n\n### 开发 \n\n#### 修改代码，保存修改，推送到自己的远程仓库\n\n```powershell\n#保存修改到暂存区\ngit add \n#将暂存区内容添加到本地仓库\ngit commit -m\"commit log\"\n#推送到自己的远程仓库\ngit push origin your_branch\n```\n\n### 提交PR\n\n发出一个pull request到 upstream develop分支\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658891906292-4ef51083-3d12-4ca8-afe3-6c7f3c17efe1.png)\n填写标题和内容点击确认\n之后导师会进行代码复核工作，满意后导师会将其合并到源分支\n\n#### 删除分支\n\n```powershell\ngit checkout master\ngit branch -d your_branch\ngit remote prune origin #如果已经在GitHub PR页面删除了分支，否则可以执行下面命令删除\ngit push origin --delete your_branch\n```\n\n\n\n### 参考\n\nhttps://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=1\n\nhttps://learngitbranching.js.org/?locale=zh_CN\n","source":"_posts/PR流程.md","raw":"---\ntitle: PR流程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-10-04 01:55:14\npassword:\nsummary:\ntags: git\ncategories:\n---\n\nps: 本次操作以Seata为源仓库\n\n### 三阶段\n\n![img](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658886093327-e4f54f3e-47e6-494f-acfb-ed3bb0ea768e.jpeg)\n\n\n\n### 准备仓库\n\n#### fork项目\n\n进入源项目页面，点击右上角Fork按钮\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888621847-879f79fc-a17c-499b-b5ca-42006d34ddbf-16588931386535-165889350667013.png)\n\n会自动生成以自己名称命名的项目\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888505200-c951bc7d-18cd-48fe-89f6-c557a45ed51d-165889350975115.png)\n\n#### clone到本地\n\n即将自己名称下的项目下载到本地\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889063492-78b17270-fd3b-468f-aced-3199adb2872a.png)\n\n```powershell\ngit clone https://github.com/(your_github_name)/(upstream_project_name).git\ncd upstream_project_name\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889091140-634fb3a9-e8c5-4ba2-b05a-c635a40b9449-16588932048249-165889351770819.png)\n\n#### 设置remote\n\n与源远程仓库建立联系\n\n```powershell\ngit remote add upstream https://github.com/...(source_project_address)\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889446085-e867c55a-dcd5-4b78-af41-58631e011463.png)\n查看联系\n\n```powershell\ngit remote -v\n```\n\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889385032-1ada811c-56dd-4d54-a3da-533cd3544e06.png)\n可以看到自己的仓库地址(`origin `)与源仓库地址(` upstream `)\n\n#### 编译项目（非必须）\n\n编译并安装所有模块到Maven本地仓库缓存，同时会生成ANTLR.g4语法文件对应的解析器Java类，这样在IDE就不会有相关编译错误。\n\n```powershell\ncd upstream_project_name\n#我一般只跳过checkstyle和Tests\nmvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=true -Djacoco.skip=true -DskipITs -DskipTests -Prelease\n```\n\n以后从源文件拉去最新代码并新建分支时可能会遇到类似解析器编译错误，可以重新运行该命令来解决问题。\n\n#### 创建分支\n\n用于开发\n\n```powershell\n#切换本地分支（切换分支到develop）\ngit checkout upstream develop\n\n# 将更新源远程repo(upstream)所包含develop分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中\ngit fetch upstream\n\n#改变基底，类似与git merge 但源仓库有最新提交时两者间有区别\ngit rebase upstream/master\n\n# 将代码push到自己名称下仓库(origin)的master分支\ngit push origin master\n\n#查看当前所在分支\ngit branch\n\n#创建新的本地分支，并切换到新分支(同原分支)\ngit checkout -b your_branch\n\n#新产生远程分支your_branch并将本地your_branch分支关联到远程your_branch分支\ngit push origin your_branch:your_branch\n```\n\nPR会按照squash方式进行merge。如果不创建新分支，本地和远程的提交记录将不能保持同步\nps: (1)方便id显示在contributor列表中可以做以下设置\n\n```powershell\ngit config --global your.name\"username\"\ngit congig --global your.email\"xxx@mail.com\"\n```\n\n(2)分支查看\n\n本地分支查看 git branch    \n\n远程分支查看 git branch -r\n\n全部分支 git branch -a\n\n分支细节查看 git branch -vv / git branch -vvr\n\n### 开发 \n\n#### 修改代码，保存修改，推送到自己的远程仓库\n\n```powershell\n#保存修改到暂存区\ngit add \n#将暂存区内容添加到本地仓库\ngit commit -m\"commit log\"\n#推送到自己的远程仓库\ngit push origin your_branch\n```\n\n### 提交PR\n\n发出一个pull request到 upstream develop分支\n![](https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658891906292-4ef51083-3d12-4ca8-afe3-6c7f3c17efe1.png)\n填写标题和内容点击确认\n之后导师会进行代码复核工作，满意后导师会将其合并到源分支\n\n#### 删除分支\n\n```powershell\ngit checkout master\ngit branch -d your_branch\ngit remote prune origin #如果已经在GitHub PR页面删除了分支，否则可以执行下面命令删除\ngit push origin --delete your_branch\n```\n\n\n\n### 参考\n\nhttps://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=1\n\nhttps://learngitbranching.js.org/?locale=zh_CN\n","slug":"PR流程","published":1,"updated":"2022-11-27T18:00:10.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clazo2oz30000usvn3mj6dy5c","content":"<p>ps: 本次操作以Seata为源仓库</p>\n<h3 id=\"三阶段\"><a href=\"#三阶段\" class=\"headerlink\" title=\"三阶段\"></a>三阶段</h3><p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658886093327-e4f54f3e-47e6-494f-acfb-ed3bb0ea768e.jpeg\" alt=\"img\"></p>\n<h3 id=\"准备仓库\"><a href=\"#准备仓库\" class=\"headerlink\" title=\"准备仓库\"></a>准备仓库</h3><h4 id=\"fork项目\"><a href=\"#fork项目\" class=\"headerlink\" title=\"fork项目\"></a>fork项目</h4><p>进入源项目页面，点击右上角Fork按钮</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888621847-879f79fc-a17c-499b-b5ca-42006d34ddbf-16588931386535-165889350667013.png\"></p>\n<p>会自动生成以自己名称命名的项目</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888505200-c951bc7d-18cd-48fe-89f6-c557a45ed51d-165889350975115.png\"></p>\n<h4 id=\"clone到本地\"><a href=\"#clone到本地\" class=\"headerlink\" title=\"clone到本地\"></a>clone到本地</h4><p>即将自己名称下的项目下载到本地<br><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889063492-78b17270-fd3b-468f-aced-3199adb2872a.png\"></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/(your_github_name)/(upstream_project_name).git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> upstream_project_name</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889091140-634fb3a9-e8c5-4ba2-b05a-c635a40b9449-16588932048249-165889351770819.png\"></p>\n<h4 id=\"设置remote\"><a href=\"#设置remote\" class=\"headerlink\" title=\"设置remote\"></a>设置remote</h4><p>与源远程仓库建立联系</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://github.com/...(source_project_address)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889446085-e867c55a-dcd5-4b78-af41-58631e011463.png\"><br>查看联系</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"literal\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889385032-1ada811c-56dd-4d54-a3da-533cd3544e06.png\"><br>可以看到自己的仓库地址(<code>origin </code>)与源仓库地址(<code>upstream</code>)</p>\n<h4 id=\"编译项目（非必须）\"><a href=\"#编译项目（非必须）\" class=\"headerlink\" title=\"编译项目（非必须）\"></a>编译项目（非必须）</h4><p>编译并安装所有模块到Maven本地仓库缓存，同时会生成ANTLR.g4语法文件对应的解析器Java类，这样在IDE就不会有相关编译错误。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> upstream_project_name</span><br><span class=\"line\"><span class=\"comment\">#我一般只跳过checkstyle和Tests</span></span><br><span class=\"line\">mvn clean install <span class=\"literal\">-Dmaven</span>.javadoc.skip=true <span class=\"literal\">-Dcheckstyle</span>.skip=true <span class=\"literal\">-Drat</span>.skip=true <span class=\"literal\">-Djacoco</span>.skip=true <span class=\"literal\">-DskipITs</span> <span class=\"literal\">-DskipTests</span> <span class=\"literal\">-Prelease</span></span><br></pre></td></tr></table></figure>\n\n<p>以后从源文件拉去最新代码并新建分支时可能会遇到类似解析器编译错误，可以重新运行该命令来解决问题。</p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>用于开发</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换本地分支（切换分支到develop）</span></span><br><span class=\"line\">git checkout upstream develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将更新源远程repo(upstream)所包含develop分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中</span></span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#改变基底，类似与git merge 但源仓库有最新提交时两者间有区别</span></span><br><span class=\"line\">git rebase upstream/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将代码push到自己名称下仓库(origin)的master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前所在分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建新的本地分支，并切换到新分支(同原分支)</span></span><br><span class=\"line\">git checkout <span class=\"literal\">-b</span> your_branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#新产生远程分支your_branch并将本地your_branch分支关联到远程your_branch分支</span></span><br><span class=\"line\">git push origin your_branch:your_branch</span><br></pre></td></tr></table></figure>\n\n<p>PR会按照squash方式进行merge。如果不创建新分支，本地和远程的提交记录将不能保持同步<br>ps: (1)方便id显示在contributor列表中可以做以下设置</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> your.name<span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git congig <span class=\"literal\">--global</span> your.email<span class=\"string\">&quot;xxx@mail.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)分支查看</p>\n<p>本地分支查看 git branch    </p>\n<p>远程分支查看 git branch -r</p>\n<p>全部分支 git branch -a</p>\n<p>分支细节查看 git branch -vv / git branch -vvr</p>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><h4 id=\"修改代码，保存修改，推送到自己的远程仓库\"><a href=\"#修改代码，保存修改，推送到自己的远程仓库\" class=\"headerlink\" title=\"修改代码，保存修改，推送到自己的远程仓库\"></a>修改代码，保存修改，推送到自己的远程仓库</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#保存修改到暂存区</span></span><br><span class=\"line\">git add </span><br><span class=\"line\"><span class=\"comment\">#将暂存区内容添加到本地仓库</span></span><br><span class=\"line\">git commit <span class=\"literal\">-m</span><span class=\"string\">&quot;commit log&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#推送到自己的远程仓库</span></span><br><span class=\"line\">git push origin your_branch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交PR\"><a href=\"#提交PR\" class=\"headerlink\" title=\"提交PR\"></a>提交PR</h3><p>发出一个pull request到 upstream develop分支<br><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658891906292-4ef51083-3d12-4ca8-afe3-6c7f3c17efe1.png\"><br>填写标题和内容点击确认<br>之后导师会进行代码复核工作，满意后导师会将其合并到源分支</p>\n<h4 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git branch <span class=\"literal\">-d</span> your_branch</span><br><span class=\"line\">git remote prune origin <span class=\"comment\">#如果已经在GitHub PR页面删除了分支，否则可以执行下面命令删除</span></span><br><span class=\"line\">git push origin <span class=\"literal\">--delete</span> your_branch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;utm_relevant_index=1\">https://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;utm_relevant_index=1</a></p>\n<p><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">https://learngitbranching.js.org/?locale=zh_CN</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"randomcover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<p>ps: 本次操作以Seata为源仓库</p>\n<h3 id=\"三阶段\"><a href=\"#三阶段\" class=\"headerlink\" title=\"三阶段\"></a>三阶段</h3><p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658886093327-e4f54f3e-47e6-494f-acfb-ed3bb0ea768e.jpeg\" alt=\"img\"></p>\n<h3 id=\"准备仓库\"><a href=\"#准备仓库\" class=\"headerlink\" title=\"准备仓库\"></a>准备仓库</h3><h4 id=\"fork项目\"><a href=\"#fork项目\" class=\"headerlink\" title=\"fork项目\"></a>fork项目</h4><p>进入源项目页面，点击右上角Fork按钮</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888621847-879f79fc-a17c-499b-b5ca-42006d34ddbf-16588931386535-165889350667013.png\"></p>\n<p>会自动生成以自己名称命名的项目</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658888505200-c951bc7d-18cd-48fe-89f6-c557a45ed51d-165889350975115.png\"></p>\n<h4 id=\"clone到本地\"><a href=\"#clone到本地\" class=\"headerlink\" title=\"clone到本地\"></a>clone到本地</h4><p>即将自己名称下的项目下载到本地<br><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889063492-78b17270-fd3b-468f-aced-3199adb2872a.png\"></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/(your_github_name)/(upstream_project_name).git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> upstream_project_name</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889091140-634fb3a9-e8c5-4ba2-b05a-c635a40b9449-16588932048249-165889351770819.png\"></p>\n<h4 id=\"设置remote\"><a href=\"#设置remote\" class=\"headerlink\" title=\"设置remote\"></a>设置remote</h4><p>与源远程仓库建立联系</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://github.com/...(source_project_address)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889446085-e867c55a-dcd5-4b78-af41-58631e011463.png\"><br>查看联系</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"literal\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658889385032-1ada811c-56dd-4d54-a3da-533cd3544e06.png\"><br>可以看到自己的仓库地址(<code>origin </code>)与源仓库地址(<code>upstream</code>)</p>\n<h4 id=\"编译项目（非必须）\"><a href=\"#编译项目（非必须）\" class=\"headerlink\" title=\"编译项目（非必须）\"></a>编译项目（非必须）</h4><p>编译并安装所有模块到Maven本地仓库缓存，同时会生成ANTLR.g4语法文件对应的解析器Java类，这样在IDE就不会有相关编译错误。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> upstream_project_name</span><br><span class=\"line\"><span class=\"comment\">#我一般只跳过checkstyle和Tests</span></span><br><span class=\"line\">mvn clean install <span class=\"literal\">-Dmaven</span>.javadoc.skip=true <span class=\"literal\">-Dcheckstyle</span>.skip=true <span class=\"literal\">-Drat</span>.skip=true <span class=\"literal\">-Djacoco</span>.skip=true <span class=\"literal\">-DskipITs</span> <span class=\"literal\">-DskipTests</span> <span class=\"literal\">-Prelease</span></span><br></pre></td></tr></table></figure>\n\n<p>以后从源文件拉去最新代码并新建分支时可能会遇到类似解析器编译错误，可以重新运行该命令来解决问题。</p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>用于开发</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换本地分支（切换分支到develop）</span></span><br><span class=\"line\">git checkout upstream develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将更新源远程repo(upstream)所包含develop分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中</span></span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#改变基底，类似与git merge 但源仓库有最新提交时两者间有区别</span></span><br><span class=\"line\">git rebase upstream/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将代码push到自己名称下仓库(origin)的master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前所在分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建新的本地分支，并切换到新分支(同原分支)</span></span><br><span class=\"line\">git checkout <span class=\"literal\">-b</span> your_branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#新产生远程分支your_branch并将本地your_branch分支关联到远程your_branch分支</span></span><br><span class=\"line\">git push origin your_branch:your_branch</span><br></pre></td></tr></table></figure>\n\n<p>PR会按照squash方式进行merge。如果不创建新分支，本地和远程的提交记录将不能保持同步<br>ps: (1)方便id显示在contributor列表中可以做以下设置</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> your.name<span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git congig <span class=\"literal\">--global</span> your.email<span class=\"string\">&quot;xxx@mail.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)分支查看</p>\n<p>本地分支查看 git branch    </p>\n<p>远程分支查看 git branch -r</p>\n<p>全部分支 git branch -a</p>\n<p>分支细节查看 git branch -vv / git branch -vvr</p>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><h4 id=\"修改代码，保存修改，推送到自己的远程仓库\"><a href=\"#修改代码，保存修改，推送到自己的远程仓库\" class=\"headerlink\" title=\"修改代码，保存修改，推送到自己的远程仓库\"></a>修改代码，保存修改，推送到自己的远程仓库</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#保存修改到暂存区</span></span><br><span class=\"line\">git add </span><br><span class=\"line\"><span class=\"comment\">#将暂存区内容添加到本地仓库</span></span><br><span class=\"line\">git commit <span class=\"literal\">-m</span><span class=\"string\">&quot;commit log&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#推送到自己的远程仓库</span></span><br><span class=\"line\">git push origin your_branch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交PR\"><a href=\"#提交PR\" class=\"headerlink\" title=\"提交PR\"></a>提交PR</h3><p>发出一个pull request到 upstream develop分支<br><img src=\"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/1658891906292-4ef51083-3d12-4ca8-afe3-6c7f3c17efe1.png\"><br>填写标题和内容点击确认<br>之后导师会进行代码复核工作，满意后导师会将其合并到源分支</p>\n<h4 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git branch <span class=\"literal\">-d</span> your_branch</span><br><span class=\"line\">git remote prune origin <span class=\"comment\">#如果已经在GitHub PR页面删除了分支，否则可以执行下面命令删除</span></span><br><span class=\"line\">git push origin <span class=\"literal\">--delete</span> your_branch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;utm_relevant_index=1\">https://blog.csdn.net/qq_33429968/article/details/62219783?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-62219783-blog-116944619.pc_relevant_multi_platform_whitelistv2&amp;utm_relevant_index=1</a></p>\n<p><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">https://learngitbranching.js.org/?locale=zh_CN</a></p>\n"},{"title":"测试方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-27T18:04:36.000Z","password":null,"summary":null,"_content":"\n最近师姐在设计调查问卷，稍微了解了一下两种试验/测试方法\n\n### 正交表法\n\nOATS（Orthogonal Array Testing Strategy）\n\n根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点。\n\n日本统计学家田口玄一将正交试验选择的水平组合列成表格，称为正交表\n\n\n\n**正交原理**\n\n围绕“均匀分散，齐整可比”的特点，实现（1）每列中不同数字出现次数相等。表明每个因素的每个水平与其它因素的每个水平参与试验的几率是完全相同的（2）在任意两列其横向组成数字对中，每种数字对出现次数相等。保证了试验点均匀地分散在因素与水平的完全组合之中。\n\nExample: 现在有一个组合有三因子，每个因子是三水平，权且用如下方式进行表示A(A1,A2,A3)，B(B1,B2,B3)，C(C1,C2,C3)，在左图的正方体中每个因子的每个水平代表的是一个面，共九个面，任意两个因子的水平之间都存在交点，共27（3x3x3）个，这就是笛卡尔积。按照两大特性设计出的正交表如右图所示，试验点用⊙表示。我们看到，在9个平面中每个平面上都恰好有三个点而每个平面的每行每列都有一个点，而且只有一个点，总共九个点。这样的试验方案，试验点的分布很均匀，试验次数也不多。\n\n![image-20221128021625046](测试方法/image-20221128021625046.png)\n\n**正交表设计**\n\n如果正交表类型不同，构造方法差异很大，甚至有些正交表其构造方法到目前还未解决。\n\n目前现成的生成工具基本参照先前已公开的正交表模板进行设计以提高效率。\n\n正交表模板：https://support.sas.com/techsup/technote/ts723_Designs.txt\n\n**R包 support.CEs** \n\nhttps://cran.r-project.org/web/packages/support.CEs/index.html\n\n首先通过调用oa.degisn 实现正交表法，得到正交主效应数列，作为第一个可替代项，然后通过rotation.design，在正交主效应基础上生成问卷设计者所需的其他替代项。\n\n![image-20221128021528802](测试方法/image-20221023000706159.png)\n\nExample:\n\n![image-20221128021543563](测试方法/image-20221125023837803.png)\n\n \n\nAttribute:属性因素\n\nNalterbatives: 可替换列个数（每道题选项个数）\n\nNblocks: 分块，能被正交主效应数组个数整除（一套题里几道题）\n\n\n\n#### 实验设计步骤\n\n![image-20221128021600632](测试方法/image-20221025122052446.png)\n\n#### rotation design/ mix and match\n\n根据正交表生成的正交主成分数列（orthogonal main-effect arrays）构建alternative选项\n\nmix and match 对 rotation design做了优化\n\n\n\n\n\n### 配对测试\n\nPairwise/All-Pairs/N-wise\n\n`Pairwise` 是 L. L. Thurstone 在 1927 年首先提出来的。他是美国的一位心理统计学家。`Pairwise` 是基于数学统计和对传统的正交分析法进行优化后得到的产物。\n\n`Pairwise` 基于如下 2 个假设：\n\n- 每一个维度都是正交的，即每一个维度互相都没有交集；\n- 根据数学统计分析，73% 的缺陷（单因素是 35%，双因素是 38%）是由单因素或两个因素相互作用产生的。19% 的缺陷是由三个因素相互作用产生的。\n\n因此，`Pairwise` 基于覆盖所有两因素的交互作用产生的用例集合性价比最高而产生的。\n\npython 库 allpairspy\n\nhttps://github.com/thombashi/allpairspy\n\nhttps://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf\n","source":"_posts/测试方法.md","raw":"---\ntitle: 测试方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-28 02:04:36\npassword:\nsummary:\ntags:\ncategories:\n---\n\n最近师姐在设计调查问卷，稍微了解了一下两种试验/测试方法\n\n### 正交表法\n\nOATS（Orthogonal Array Testing Strategy）\n\n根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点。\n\n日本统计学家田口玄一将正交试验选择的水平组合列成表格，称为正交表\n\n\n\n**正交原理**\n\n围绕“均匀分散，齐整可比”的特点，实现（1）每列中不同数字出现次数相等。表明每个因素的每个水平与其它因素的每个水平参与试验的几率是完全相同的（2）在任意两列其横向组成数字对中，每种数字对出现次数相等。保证了试验点均匀地分散在因素与水平的完全组合之中。\n\nExample: 现在有一个组合有三因子，每个因子是三水平，权且用如下方式进行表示A(A1,A2,A3)，B(B1,B2,B3)，C(C1,C2,C3)，在左图的正方体中每个因子的每个水平代表的是一个面，共九个面，任意两个因子的水平之间都存在交点，共27（3x3x3）个，这就是笛卡尔积。按照两大特性设计出的正交表如右图所示，试验点用⊙表示。我们看到，在9个平面中每个平面上都恰好有三个点而每个平面的每行每列都有一个点，而且只有一个点，总共九个点。这样的试验方案，试验点的分布很均匀，试验次数也不多。\n\n![image-20221128021625046](测试方法/image-20221128021625046.png)\n\n**正交表设计**\n\n如果正交表类型不同，构造方法差异很大，甚至有些正交表其构造方法到目前还未解决。\n\n目前现成的生成工具基本参照先前已公开的正交表模板进行设计以提高效率。\n\n正交表模板：https://support.sas.com/techsup/technote/ts723_Designs.txt\n\n**R包 support.CEs** \n\nhttps://cran.r-project.org/web/packages/support.CEs/index.html\n\n首先通过调用oa.degisn 实现正交表法，得到正交主效应数列，作为第一个可替代项，然后通过rotation.design，在正交主效应基础上生成问卷设计者所需的其他替代项。\n\n![image-20221128021528802](测试方法/image-20221023000706159.png)\n\nExample:\n\n![image-20221128021543563](测试方法/image-20221125023837803.png)\n\n \n\nAttribute:属性因素\n\nNalterbatives: 可替换列个数（每道题选项个数）\n\nNblocks: 分块，能被正交主效应数组个数整除（一套题里几道题）\n\n\n\n#### 实验设计步骤\n\n![image-20221128021600632](测试方法/image-20221025122052446.png)\n\n#### rotation design/ mix and match\n\n根据正交表生成的正交主成分数列（orthogonal main-effect arrays）构建alternative选项\n\nmix and match 对 rotation design做了优化\n\n\n\n\n\n### 配对测试\n\nPairwise/All-Pairs/N-wise\n\n`Pairwise` 是 L. L. Thurstone 在 1927 年首先提出来的。他是美国的一位心理统计学家。`Pairwise` 是基于数学统计和对传统的正交分析法进行优化后得到的产物。\n\n`Pairwise` 基于如下 2 个假设：\n\n- 每一个维度都是正交的，即每一个维度互相都没有交集；\n- 根据数学统计分析，73% 的缺陷（单因素是 35%，双因素是 38%）是由单因素或两个因素相互作用产生的。19% 的缺陷是由三个因素相互作用产生的。\n\n因此，`Pairwise` 基于覆盖所有两因素的交互作用产生的用例集合性价比最高而产生的。\n\npython 库 allpairspy\n\nhttps://github.com/thombashi/allpairspy\n\nhttps://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf\n","slug":"测试方法","published":1,"updated":"2022-11-27T18:39:02.615Z","_id":"clazovodk0000w8vn7mi99jbg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近师姐在设计调查问卷，稍微了解了一下两种试验/测试方法</p>\n<h3 id=\"正交表法\"><a href=\"#正交表法\" class=\"headerlink\" title=\"正交表法\"></a>正交表法</h3><p>OATS（Orthogonal Array Testing Strategy）</p>\n<p>根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点。</p>\n<p>日本统计学家田口玄一将正交试验选择的水平组合列成表格，称为正交表</p>\n<p><strong>正交原理</strong></p>\n<p>围绕“均匀分散，齐整可比”的特点，实现（1）每列中不同数字出现次数相等。表明每个因素的每个水平与其它因素的每个水平参与试验的几率是完全相同的（2）在任意两列其横向组成数字对中，每种数字对出现次数相等。保证了试验点均匀地分散在因素与水平的完全组合之中。</p>\n<p>Example: 现在有一个组合有三因子，每个因子是三水平，权且用如下方式进行表示A(A1,A2,A3)，B(B1,B2,B3)，C(C1,C2,C3)，在左图的正方体中每个因子的每个水平代表的是一个面，共九个面，任意两个因子的水平之间都存在交点，共27（3x3x3）个，这就是笛卡尔积。按照两大特性设计出的正交表如右图所示，试验点用⊙表示。我们看到，在9个平面中每个平面上都恰好有三个点而每个平面的每行每列都有一个点，而且只有一个点，总共九个点。这样的试验方案，试验点的分布很均匀，试验次数也不多。</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221128021625046.png\" alt=\"image-20221128021625046\"></p>\n<p><strong>正交表设计</strong></p>\n<p>如果正交表类型不同，构造方法差异很大，甚至有些正交表其构造方法到目前还未解决。</p>\n<p>目前现成的生成工具基本参照先前已公开的正交表模板进行设计以提高效率。</p>\n<p>正交表模板：<a href=\"https://support.sas.com/techsup/technote/ts723_Designs.txt\">https://support.sas.com/techsup/technote/ts723_Designs.txt</a></p>\n<p><strong>R包 support.CEs</strong> </p>\n<p><a href=\"https://cran.r-project.org/web/packages/support.CEs/index.html\">https://cran.r-project.org/web/packages/support.CEs/index.html</a></p>\n<p>首先通过调用oa.degisn 实现正交表法，得到正交主效应数列，作为第一个可替代项，然后通过rotation.design，在正交主效应基础上生成问卷设计者所需的其他替代项。</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221023000706159.png\" alt=\"image-20221128021528802\"></p>\n<p>Example:</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221125023837803.png\" alt=\"image-20221128021543563\"></p>\n<p>Attribute:属性因素</p>\n<p>Nalterbatives: 可替换列个数（每道题选项个数）</p>\n<p>Nblocks: 分块，能被正交主效应数组个数整除（一套题里几道题）</p>\n<h4 id=\"实验设计步骤\"><a href=\"#实验设计步骤\" class=\"headerlink\" title=\"实验设计步骤\"></a>实验设计步骤</h4><p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221025122052446.png\" alt=\"image-20221128021600632\"></p>\n<h4 id=\"rotation-design-mix-and-match\"><a href=\"#rotation-design-mix-and-match\" class=\"headerlink\" title=\"rotation design/ mix and match\"></a>rotation design/ mix and match</h4><p>根据正交表生成的正交主成分数列（orthogonal main-effect arrays）构建alternative选项</p>\n<p>mix and match 对 rotation design做了优化</p>\n<h3 id=\"配对测试\"><a href=\"#配对测试\" class=\"headerlink\" title=\"配对测试\"></a>配对测试</h3><p>Pairwise/All-Pairs/N-wise</p>\n<p><code>Pairwise</code> 是 L. L. Thurstone 在 1927 年首先提出来的。他是美国的一位心理统计学家。<code>Pairwise</code> 是基于数学统计和对传统的正交分析法进行优化后得到的产物。</p>\n<p><code>Pairwise</code> 基于如下 2 个假设：</p>\n<ul>\n<li>每一个维度都是正交的，即每一个维度互相都没有交集；</li>\n<li>根据数学统计分析，73% 的缺陷（单因素是 35%，双因素是 38%）是由单因素或两个因素相互作用产生的。19% 的缺陷是由三个因素相互作用产生的。</li>\n</ul>\n<p>因此，<code>Pairwise</code> 基于覆盖所有两因素的交互作用产生的用例集合性价比最高而产生的。</p>\n<p>python 库 allpairspy</p>\n<p><a href=\"https://github.com/thombashi/allpairspy\">https://github.com/thombashi/allpairspy</a></p>\n<p><a href=\"https://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf\">https://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"randomcover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<p>最近师姐在设计调查问卷，稍微了解了一下两种试验/测试方法</p>\n<h3 id=\"正交表法\"><a href=\"#正交表法\" class=\"headerlink\" title=\"正交表法\"></a>正交表法</h3><p>OATS（Orthogonal Array Testing Strategy）</p>\n<p>根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点。</p>\n<p>日本统计学家田口玄一将正交试验选择的水平组合列成表格，称为正交表</p>\n<p><strong>正交原理</strong></p>\n<p>围绕“均匀分散，齐整可比”的特点，实现（1）每列中不同数字出现次数相等。表明每个因素的每个水平与其它因素的每个水平参与试验的几率是完全相同的（2）在任意两列其横向组成数字对中，每种数字对出现次数相等。保证了试验点均匀地分散在因素与水平的完全组合之中。</p>\n<p>Example: 现在有一个组合有三因子，每个因子是三水平，权且用如下方式进行表示A(A1,A2,A3)，B(B1,B2,B3)，C(C1,C2,C3)，在左图的正方体中每个因子的每个水平代表的是一个面，共九个面，任意两个因子的水平之间都存在交点，共27（3x3x3）个，这就是笛卡尔积。按照两大特性设计出的正交表如右图所示，试验点用⊙表示。我们看到，在9个平面中每个平面上都恰好有三个点而每个平面的每行每列都有一个点，而且只有一个点，总共九个点。这样的试验方案，试验点的分布很均匀，试验次数也不多。</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221128021625046.png\" alt=\"image-20221128021625046\"></p>\n<p><strong>正交表设计</strong></p>\n<p>如果正交表类型不同，构造方法差异很大，甚至有些正交表其构造方法到目前还未解决。</p>\n<p>目前现成的生成工具基本参照先前已公开的正交表模板进行设计以提高效率。</p>\n<p>正交表模板：<a href=\"https://support.sas.com/techsup/technote/ts723_Designs.txt\">https://support.sas.com/techsup/technote/ts723_Designs.txt</a></p>\n<p><strong>R包 support.CEs</strong> </p>\n<p><a href=\"https://cran.r-project.org/web/packages/support.CEs/index.html\">https://cran.r-project.org/web/packages/support.CEs/index.html</a></p>\n<p>首先通过调用oa.degisn 实现正交表法，得到正交主效应数列，作为第一个可替代项，然后通过rotation.design，在正交主效应基础上生成问卷设计者所需的其他替代项。</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221023000706159.png\" alt=\"image-20221128021528802\"></p>\n<p>Example:</p>\n<p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221125023837803.png\" alt=\"image-20221128021543563\"></p>\n<p>Attribute:属性因素</p>\n<p>Nalterbatives: 可替换列个数（每道题选项个数）</p>\n<p>Nblocks: 分块，能被正交主效应数组个数整除（一套题里几道题）</p>\n<h4 id=\"实验设计步骤\"><a href=\"#实验设计步骤\" class=\"headerlink\" title=\"实验设计步骤\"></a>实验设计步骤</h4><p><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/image-20221025122052446.png\" alt=\"image-20221128021600632\"></p>\n<h4 id=\"rotation-design-mix-and-match\"><a href=\"#rotation-design-mix-and-match\" class=\"headerlink\" title=\"rotation design/ mix and match\"></a>rotation design/ mix and match</h4><p>根据正交表生成的正交主成分数列（orthogonal main-effect arrays）构建alternative选项</p>\n<p>mix and match 对 rotation design做了优化</p>\n<h3 id=\"配对测试\"><a href=\"#配对测试\" class=\"headerlink\" title=\"配对测试\"></a>配对测试</h3><p>Pairwise/All-Pairs/N-wise</p>\n<p><code>Pairwise</code> 是 L. L. Thurstone 在 1927 年首先提出来的。他是美国的一位心理统计学家。<code>Pairwise</code> 是基于数学统计和对传统的正交分析法进行优化后得到的产物。</p>\n<p><code>Pairwise</code> 基于如下 2 个假设：</p>\n<ul>\n<li>每一个维度都是正交的，即每一个维度互相都没有交集；</li>\n<li>根据数学统计分析，73% 的缺陷（单因素是 35%，双因素是 38%）是由单因素或两个因素相互作用产生的。19% 的缺陷是由三个因素相互作用产生的。</li>\n</ul>\n<p>因此，<code>Pairwise</code> 基于覆盖所有两因素的交互作用产生的用例集合性价比最高而产生的。</p>\n<p>python 库 allpairspy</p>\n<p><a href=\"https://github.com/thombashi/allpairspy\">https://github.com/thombashi/allpairspy</a></p>\n<p><a href=\"https://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf\">https://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf</a></p>\n"},{"title":"杂记20221125","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-11-27T18:20:58.000Z","password":null,"summary":null,"_content":"\n学期很快就到了期末。\n\n虽然还是会有一些焦虑和应付了事的时候，但时间的自我掌控度极高，在快乐的时候会觉得这一年像是自己偷来的一样，弥足珍贵。\n\n很高兴重新开始学习物理，也很幸运有很多奇奇怪怪的机会，看到了厉害的人。觉得能在某个方向基础扎实了解深入总是富有魅力的。在机构和学校合作的会议上看到大佬侃侃而谈计算机体系和城市规划之间架构上的相似性，觉得学习又多了些乐趣。\n\n做初探神经网络的作业的过程中，看到梗直哥的解说，进而看到*Steven Strogatz*对非线性系统的分类：\n\n![image-20221128022212415](杂记20221125/image-20221128022212415.png)\n\n混沌理论在中间，比三体问题非线性稍弱，神经网络维度更高，非线性也更强。免疫学，生态系统，经济型和量子理论都在其中 ，其复杂性来自非线性的不稳定 和对初值的敏感。\n\n原来三体问题的维度低于神经网络，而Space Weather课程中涉及到的Plasma是更复杂的内容，属于时空复杂分析，这又与城市建模中的时空分析有多少联系呢？\n\n","source":"_posts/杂记20221125.md","raw":"---\ntitle: 杂记20221125\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-11-28 02:20:58\npassword:\nsummary:\ntags: 杂记\ncategories:\n---\n\n学期很快就到了期末。\n\n虽然还是会有一些焦虑和应付了事的时候，但时间的自我掌控度极高，在快乐的时候会觉得这一年像是自己偷来的一样，弥足珍贵。\n\n很高兴重新开始学习物理，也很幸运有很多奇奇怪怪的机会，看到了厉害的人。觉得能在某个方向基础扎实了解深入总是富有魅力的。在机构和学校合作的会议上看到大佬侃侃而谈计算机体系和城市规划之间架构上的相似性，觉得学习又多了些乐趣。\n\n做初探神经网络的作业的过程中，看到梗直哥的解说，进而看到*Steven Strogatz*对非线性系统的分类：\n\n![image-20221128022212415](杂记20221125/image-20221128022212415.png)\n\n混沌理论在中间，比三体问题非线性稍弱，神经网络维度更高，非线性也更强。免疫学，生态系统，经济型和量子理论都在其中 ，其复杂性来自非线性的不稳定 和对初值的敏感。\n\n原来三体问题的维度低于神经网络，而Space Weather课程中涉及到的Plasma是更复杂的内容，属于时空复杂分析，这又与城市建模中的时空分析有多少联系呢？\n\n","slug":"杂记20221125","published":1,"updated":"2022-11-27T18:25:49.443Z","_id":"clazovodt0001w8vng8fc4shx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>学期很快就到了期末。</p>\n<p>虽然还是会有一些焦虑和应付了事的时候，但时间的自我掌控度极高，在快乐的时候会觉得这一年像是自己偷来的一样，弥足珍贵。</p>\n<p>很高兴重新开始学习物理，也很幸运有很多奇奇怪怪的机会，看到了厉害的人。觉得能在某个方向基础扎实了解深入总是富有魅力的。在机构和学校合作的会议上看到大佬侃侃而谈计算机体系和城市规划之间架构上的相似性，觉得学习又多了些乐趣。</p>\n<p>做初探神经网络的作业的过程中，看到梗直哥的解说，进而看到<em>Steven Strogatz</em>对非线性系统的分类：</p>\n<p><img src=\"/project/2022/11/28/%E6%9D%82%E8%AE%B020221125/image-20221128022212415.png\" alt=\"image-20221128022212415\"></p>\n<p>混沌理论在中间，比三体问题非线性稍弱，神经网络维度更高，非线性也更强。免疫学，生态系统，经济型和量子理论都在其中 ，其复杂性来自非线性的不稳定 和对初值的敏感。</p>\n<p>原来三体问题的维度低于神经网络，而Space Weather课程中涉及到的Plasma是更复杂的内容，属于时空复杂分析，这又与城市建模中的时空分析有多少联系呢？</p>\n","site":{"data":{"link":[{"class_name":"友情链接","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]}]}},"randomcover":"https://gcore.jsdelivr.net/gh/SherZhou/pic_source/img/piday2022_insight.png","excerpt":"","more":"<p>学期很快就到了期末。</p>\n<p>虽然还是会有一些焦虑和应付了事的时候，但时间的自我掌控度极高，在快乐的时候会觉得这一年像是自己偷来的一样，弥足珍贵。</p>\n<p>很高兴重新开始学习物理，也很幸运有很多奇奇怪怪的机会，看到了厉害的人。觉得能在某个方向基础扎实了解深入总是富有魅力的。在机构和学校合作的会议上看到大佬侃侃而谈计算机体系和城市规划之间架构上的相似性，觉得学习又多了些乐趣。</p>\n<p>做初探神经网络的作业的过程中，看到梗直哥的解说，进而看到<em>Steven Strogatz</em>对非线性系统的分类：</p>\n<p><img src=\"/project/2022/11/28/%E6%9D%82%E8%AE%B020221125/image-20221128022212415.png\" alt=\"image-20221128022212415\"></p>\n<p>混沌理论在中间，比三体问题非线性稍弱，神经网络维度更高，非线性也更强。免疫学，生态系统，经济型和量子理论都在其中 ，其复杂性来自非线性的不稳定 和对初值的敏感。</p>\n<p>原来三体问题的维度低于神经网络，而Space Weather课程中涉及到的Plasma是更复杂的内容，属于时空复杂分析，这又与城市建模中的时空分析有多少联系呢？</p>\n"}],"PostAsset":[{"_id":"source/_posts/测试方法/image-20221023000706159.png","slug":"image-20221023000706159.png","post":"clazovodk0000w8vn7mi99jbg","modified":0,"renderable":0},{"_id":"source/_posts/测试方法/image-20221025122052446.png","slug":"image-20221025122052446.png","post":"clazovodk0000w8vn7mi99jbg","modified":0,"renderable":0},{"_id":"source/_posts/测试方法/image-20221125023837803.png","slug":"image-20221125023837803.png","post":"clazovodk0000w8vn7mi99jbg","modified":0,"renderable":0},{"_id":"source/_posts/测试方法/image-20221128021625046.png","slug":"image-20221128021625046.png","post":"clazovodk0000w8vn7mi99jbg","modified":0,"renderable":0},{"_id":"source/_posts/杂记20221125/image-20221128022212415.png","slug":"image-20221128022212415.png","post":"clazovodt0001w8vng8fc4shx","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl8ud1pvx0001vgvngv5m1u6o","category_id":"cl8ud1pw60004vgvn44h7ekda","_id":"cl8ud1pwa0009vgvnah2s6vcw"}],"PostTag":[{"post_id":"cl8ud1pvx0001vgvngv5m1u6o","tag_id":"cl8ud1pw80005vgvneyf681b4","_id":"cl8ud1pwa0008vgvn871r95ye"},{"post_id":"clazo2oz30000usvn3mj6dy5c","tag_id":"clazo2p0k0001usvne4vl5t9d","_id":"clazo2p0q0002usvnhfvw7rqo"},{"post_id":"clazovodt0001w8vng8fc4shx","tag_id":"clazozdv500023wvnea9pgbek","_id":"clazozdv700033wvnewdohpau"}],"Tag":[{"name":"事务","_id":"cl8ud1pw80005vgvneyf681b4"},{"name":"git","_id":"clazo2p0k0001usvne4vl5t9d"},{"name":"杂ji'l","_id":"clazozc8500003wvnf8cid454"},{"name":"杂记","_id":"clazozdv500023wvnea9pgbek"}]}}